<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Idiomatic Ruby on Functional, Idiomatic Ruby Musings - Jim OKelly - Professional Ruby Mentor</title>
    <link>/series/idiomatic-ruby/</link>
    <description>Recent content in Idiomatic Ruby on Functional, Idiomatic Ruby Musings - Jim OKelly - Professional Ruby Mentor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Fri, 05 Jun 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="/series/idiomatic-ruby/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Arrays, Multiple Assiment, and Splatting</title>
      <link>/idiomatic-ruby-2/</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/idiomatic-ruby-2/</guid>
      <description>

&lt;h2 id=&#34;in-ruby-the-array-is-king-thanks-matz:0e5e919d9272cede67549c6788ab2218&#34;&gt;In Ruby, the Array is King - Thanks Matz!&lt;/h2&gt;

&lt;p&gt;I have dug into the C source code to look at how Array was implemented since
early on I could tell that Ruby didn&amp;rsquo;t really allocate Arrays in the normal way,
ie.. start with what you have, data size-wise, and then &lt;em&gt;grow&lt;/em&gt; the Array from
there.&lt;/p&gt;

&lt;p&gt;If it worked in the simplistic form I thought about back in 2009, it would be
very, very inefficient, so I went digging. Here is what I found&amp;hellip; I give you
the TLDR version of the internals of Array memory management in Ruby&amp;hellip;..&lt;/p&gt;

&lt;p&gt;Matz and co have &lt;em&gt;highly optimized&lt;/em&gt; Arrays in Ruby so there is actually a lot
of linked lists and pointer math going on under the hood so you do can work
with Arrays at such a high level, with little care to how you do it. (for the
most part)&lt;/p&gt;

&lt;h2 id=&#34;use-the-array-luke-jedi-ruby-array-tricks:0e5e919d9272cede67549c6788ab2218&#34;&gt;Use the Array, Luke.. Jedi Ruby Array Tricks&lt;/h2&gt;

&lt;p&gt;Since Matz and co have gone through such lengths to make Arrays optimal and as
fast as something is going to be on a VM like MRI, I make liberal use of them
in my programs. Due to this need, Ruby has a bunch of &amp;lsquo;shortcuts&amp;rsquo; to help us
create and use Arrays.&lt;/p&gt;

&lt;p&gt;Want to create an Array of Strings? Coooooooo man, we got that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%w[John Susan Mary Black Red Heart Spade]
=&amp;gt; [&amp;quot;John&amp;quot;, &amp;quot;Susan&amp;quot;, &amp;quot;Mary&amp;quot;, &amp;quot;Black&amp;quot;, &amp;quot;Red&amp;quot;, &amp;quot;Heart&amp;quot;, &amp;quot;Spade&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What if you need spaces in those strings? Well, then you could do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%w[John Susan Mary Black Red Heart Spade 8\ of\ spades]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works because &lt;code&gt;\&lt;/code&gt; is an &lt;em&gt;escape&lt;/em&gt; character. In this case it &lt;em&gt;escapes&lt;/em&gt;
the &amp;lsquo;specialness&amp;rsquo; of the space character in the context of &lt;code&gt;%w&lt;/code&gt; which, if
you remember, uses spaces as an Array delimeter, saving us the &amp;lsquo;effort&amp;rsquo; of
using commas and quotes.&lt;/p&gt;

&lt;p&gt;Another common need in Ruby is to create an Array of &lt;code&gt;Symbols&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%i[hearts spades diamonds clubs]
=&amp;gt; [:hearts, :spades, :diamonds, :clubs]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, that works just like &lt;code&gt;%w&lt;/code&gt; except we get a &lt;code&gt;Symbol&lt;/code&gt; instead
of a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are a couple more:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%r{ ^http://regex\. }
%{ String can have &#39;single&#39; or &amp;quot;double&amp;quot; quotes }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;array-maths-if-you-have-3-oranges-and-i-give-you-1-of-mine:0e5e919d9272cede67549c6788ab2218&#34;&gt;Array Maths - If you have 3 oranges and I give you 1 of mine&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s tell this story using code since this &lt;em&gt;is&lt;/em&gt; Ruby:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mine  = 5.times.map { :orange }
=&amp;gt; [:orange, :orange, :orange, :orange, :orange]

yours = 3.times.map { :orange }
=&amp;gt; [:orange, :orange, :orange]

given = [:orange]
=&amp;gt; [:orange]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s dangerous to go alone! Take this üçä&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;yours = yours + mine.pop # .pop, pops one off _mine_
=&amp;gt; [:orange, :orange, :orange, :orange]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still following? I just gave you an orange bro (or broette)! What about my oranges now?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mine
=&amp;gt; [:orange, :orange, :orange, :orange]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Normally I prefer to &lt;em&gt;not mutate&lt;/em&gt; stuff willie-nillie, but since these are üçä s and not
numbers like 1 2 3 4, we can&amp;rsquo;t just do &lt;code&gt;mine - [:orange]&lt;/code&gt; (you can try it) because it
will take ALL the üçä s out of my bag.&lt;/p&gt;

&lt;h2 id=&#34;multiple-assignment-and-splatting:0e5e919d9272cede67549c6788ab2218&#34;&gt;Multiple assignment and splatting&lt;/h2&gt;

&lt;p&gt;The last two Array tricks I will show you are multiple assignment and the splat, or
deconstructive operator.&lt;/p&gt;

&lt;p&gt;Multiple assignment is useful in a number of ways, and rather than give another long
winded expaination of it, let&amp;rsquo;s look at some code!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def initialize(val1, val2, val3)
  @val1, @val2, @val3 = val1, val2, val3
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have seen this in a lot of Ruby code and I will call it shit, at least in this form. As
soon as someone needs to add another value to change the order, things get ugly pretty
fast. Let&amp;rsquo;s change the arguments to x, y, and z:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def initialize(x, y, z)
  @x, @y, @z = x, y, z
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case it isn&amp;rsquo;t extremely terrible from where I sit. As these are now 3d coordinates
their order and grouping makes a lot more sense. So in short, use multiple assignment like
this when the variables are closely related, but a better idea would be to make an object
to &amp;lsquo;contain&amp;rsquo; them and just pass that into this method. Then we don&amp;rsquo;t have the issues of
three params being passed in or what order they need to be in.&lt;/p&gt;

&lt;p&gt;But there is another form of multiple assignment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# swap around values
x, y = y, x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I like this swapping idiom very much when it is useful to the problem I am solving. Another
one would be decontructing multiple return values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def some_method
  [x, y, z]
end

x, y, z = some_method
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this method returns an Array, we can &amp;lsquo;deconstruct&amp;rsquo; that array into the three values
Here is another example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;head, *tail = %w[fred susan bobby]
head
=&amp;gt; &amp;quot;fred&amp;quot;

tail
=&amp;gt; [&amp;quot;susan&amp;quot;, &amp;quot;bobbby&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whoa!!! Pointer magic in Ruby?&lt;/p&gt;

&lt;p&gt;Well, no. That is the Splat, or deconstructor operator I elluded to before. Do you see how it
works? &lt;code&gt;head&lt;/code&gt; gets the first value of the Array, while &lt;code&gt;tail&lt;/code&gt; gets the rest of the elements,
so we end up with a head with 1 element, and a tail with the rest.&lt;/p&gt;

&lt;p&gt;That is all I have for you today. Soon I will start showing off some functional principles
that will make use of what you learned in the first 2 of this series, &amp;ldquo;Idiomatic Ruby&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;See you soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Idiomatic Ruby</title>
      <link>/idiomatic-ruby-1/</link>
      <pubDate>Mon, 20 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>/idiomatic-ruby-1/</guid>
      <description>

&lt;h2 id=&#34;just-because-it-runs-as-ruby-doesn-t-mean-it-is-ruby:bdec7a466a0d14d4fc6efa2a9be8b5a4&#34;&gt;Just because it runs AS Ruby doesn&amp;rsquo;t mean it IS Ruby!&lt;/h2&gt;

&lt;p&gt;OK, so you are writing IN Ruby, but you probably aren‚Äôt writing Ruby. You are writing c/basic in Rubyish syntax. This is bad. Slap your hand bad. Makes Matz cry bad. You should be writing in &lt;em&gt;idiomatic Ruby&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So what does this &lt;em&gt;idiomatic Ruby&lt;/em&gt; I speak of look like?&lt;/p&gt;

&lt;p&gt;What better way to present my case then by starting with some &lt;em&gt;unidiomatic Ruby&lt;/em&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def some_long_method_with_many_problems(user, ids)
  vals = []
  ids.each do |id|
    vals &amp;lt;&amp;lt; user.returns_a_hash(id)
  end

  if vals.any?
    retval = do_something_with_hashes(vals)
  else
    retval = do_something_without
  end
  retval
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then refactor it into this &lt;em&gt;idiomatic Ruby&lt;/em&gt; we get much different looking code. Code that is clean and neat and terse. &lt;em&gt;Ruby code&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Let‚Äôs start with what I would consider the &lt;em&gt;first&lt;/em&gt; violation of &lt;em&gt;idiomatic&lt;/em&gt; Ruby, the use of a local variable to be looped over and appended to or replaced based on the outcome of the loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;vals = []
ids.each do |id|
  vals &amp;lt;&amp;lt; user.returns_a_hash(id)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we really have here is a &lt;em&gt;enumeration&lt;/em&gt;. We are going to iterate over several objects and place the return of that object method call into an array.&lt;/p&gt;

&lt;p&gt;So instead of looping, lets make it &lt;em&gt;idiomatic&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;vals = ids.map {|id| user.returns_a_hash(id) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second violation to &lt;em&gt;idiomatic&lt;/em&gt; Ruby is the ‚Äòinner‚Äô assignment inside the conditional:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if vals.any?
  retval = do_something_with_hashes(vals)
else
  retval = do_something_without
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The fix is simple, remove the duplication of the retval assignment by moving the assignup up ahead of the if:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;retval = if vals.any?
  do_something_with_hashes(vals)
else
  do_something_without
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But then we need to think about what we want this method to &lt;em&gt;return&lt;/em&gt;. In this case it will be the return of one of the two methods in the conditional. Since this is &lt;em&gt;Ruby&lt;/em&gt;, every method returns the last evaluation naturally, which is why a return statement at the end of a method in Ruby makes little sense.&lt;/p&gt;

&lt;p&gt;Well, if the last evaluation is returned and the last evaluation is the return of one of the two methods, we don&amp;rsquo;t need to store a retval variable at all!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if vals.any?
  do_something_with_hashes(vals)
else
  do_something_without
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All together now!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def a_better_method(user, ids)
  vals = ids.map {|id| user.returns_a_hash(id) }
  if vals.any?
    do_something_with_hashes(vals)
  else
    do_something_without
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please challenge every line of code you have to be &lt;em&gt;idiomatic&lt;/em&gt;, &lt;em&gt;beautiful&lt;/em&gt; Ruby code.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>