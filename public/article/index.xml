<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Functional, Idiomatic Ruby Musings - Jim OKelly - Professional Ruby Mentor</title>
    <link>/article/</link>
    <description>Recent content in Articles on Functional, Idiomatic Ruby Musings - Jim OKelly - Professional Ruby Mentor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Fri, 17 Jul 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="/article/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Analyzing Shakespeare using Functional Ruby</title>
      <link>/analyzing-shakespeare-functional-ruby/</link>
      <pubDate>Fri, 17 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/analyzing-shakespeare-functional-ruby/</guid>
      <description>

&lt;h2 id=&#34;a-code-kata-from-some-kool-people:3c371311742d4197b845c3473589c736&#34;&gt;A code kata from some kool people&lt;/h2&gt;

&lt;p&gt;This kata comes from Thoutbot&amp;rsquo;s Upcase program. A student of mine sent it in to me a year ago and I have used it since as a teaching tool to introduce strictly Object Orientated Programmers to face the strange&amp;hellip; Chachachachanges&amp;hellip;..&lt;/p&gt;

&lt;h2 id=&#34;but-first-some-tenderlove-parsing:3c371311742d4197b845c3473589c736&#34;&gt;But first, some Tenderlove parsing!&lt;/h2&gt;

&lt;p&gt;Nokogiri is the long pause in your &lt;code&gt;gem install&lt;/code&gt; regimen. That pause is some c extentions being built which are needed to make it the speedy and useful tool it is.&lt;/p&gt;

&lt;p&gt;The excersize at hand is to take some XML from this &lt;a href=&#34;file&#34;&gt;www.ibiblio.org/xml/examples/shakespeare/macbeth.xml&lt;/a&gt; and count out the spoken lines for each character appearing.&lt;/p&gt;

&lt;h2 id=&#34;counting-in-the-counting-house-counting-out:3c371311742d4197b845c3473589c736&#34;&gt;Counting in the counting house&amp;hellip; counting out&amp;hellip;&lt;/h2&gt;

&lt;p&gt;To get that count we will be writing a Unix program, meaning a script that is executable, takes input, returns output. We do it with Ruby and a shebang.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#!/usr/bin/env ruby
# cat macbeth.xml | xargs -0 ./lc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second line there is really just a comment on how to use the program, but the first line tells the managing process which interpreter to use. This is done because the name of the utility &lt;code&gt;lc&lt;/code&gt; does not have an &lt;em&gt;rb&lt;/em&gt; extension.&lt;/p&gt;

&lt;h2 id=&#34;getting-the-xml-in-question:3c371311742d4197b845c3473589c736&#34;&gt;Getting the XML in question&lt;/h2&gt;

&lt;p&gt;We can either get the xml &lt;em&gt;realtime&lt;/em&gt; and &lt;em&gt;pipe&lt;/em&gt; it into our utility, or download the xml and then use &lt;code&gt;cat&lt;/code&gt; to send it into our pipe.&lt;/p&gt;

&lt;p&gt;The first option looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl http://www.ibiblio.org/xml/examples/shakespeare/macbeth.xml | xargs -c ./lc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl http://www.ibiblio.org/xml/examples/shakespeare/macbeth.xml &amp;gt; macbeth.xml
cat macbeth.xml | xargs -c ./lc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the common demominator here is the &lt;em&gt;./lc&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-unix-utility-commmand:3c371311742d4197b845c3473589c736&#34;&gt;Creating a UNIX utility commmand&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;./&lt;/em&gt; in &lt;em&gt;./lc&lt;/em&gt; means the current working directory, ie, the one you &lt;code&gt;cd&lt;/code&gt; into. The filename of the command we are going to write is &lt;code&gt;lc&lt;/code&gt;. Let&amp;rsquo;s make that shit now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vim lc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, create a file called &lt;code&gt;lc&lt;/code&gt; in the directory you have open in the terminal. In it put:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env ruby
# cat macbeth.xml | xargs -0 ./lc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;making-that-shit-executable:3c371311742d4197b845c3473589c736&#34;&gt;Making that shit executable&lt;/h2&gt;

&lt;p&gt;If you try to run it now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./lc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will get a permission error, that is because this file does not have permission to execute as per your login. To &lt;em&gt;set the executable flag&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod a+x ./lc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which means in &lt;em&gt;neckbeard&lt;/em&gt;, make this file executable for &lt;em&gt;all&lt;/em&gt; groups foo! Now run it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./lc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nada! But that is what we want. Next add this line to the end of that &lt;code&gt;lc&lt;/code&gt; file like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;puts &#39;Hello from UNIX bitches!&#39;&amp;quot; &amp;gt;&amp;gt; ./lc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are piping shit all over, welcome to the world of the programmer. /troll&lt;/p&gt;

&lt;p&gt;Next time you run it, it will print out that statement, using the Ruby &lt;code&gt;puts&lt;/code&gt; method, therefore it &amp;lsquo;works&amp;rsquo;. Now let&amp;rsquo;s start making it &lt;em&gt;useful&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;nokogiri-search-and-ruby-map:3c371311742d4197b845c3473589c736&#34;&gt;Nokogiri search and Ruby map&lt;/h2&gt;

&lt;p&gt;Time to add some more code. Delete that last puts and make your &lt;code&gt;lc&lt;/code&gt; file look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#!/usr/bin/env ruby
# cat macbeth.xml | xargs -0 ./lc

require &#39;nokogiri&#39;

doc      = Nokogiri::XML(ARGV[0])
speeches = doc.search(&#39;SPEECH&#39;)
speakers = doc.search(&#39;SPEAKER&#39;).map(&amp;amp;:text).uniq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We &lt;code&gt;require&lt;/code&gt;d nokogiri so we could reference it. Then we use nokogiri to parse the xml sent in as &lt;code&gt;ARGV[0]&lt;/code&gt; into an tree based object model in order to easier extract the stuff we actually want from that giant xml file.&lt;/p&gt;

&lt;p&gt;The next line get all the blocks of &lt;SPEECH&gt;, which we need:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;SPEECH&amp;gt;
  &amp;lt;SPEAKER&amp;gt;First Witch&amp;lt;/SPEAKER&amp;gt;
  &amp;lt;LINE&amp;gt;When shall we three meet again&amp;lt;/LINE&amp;gt;
  &amp;lt;LINE&amp;gt;In thunder, lightning, or in rain?&amp;lt;/LINE&amp;gt;
&amp;lt;/SPEECH&amp;gt;
&amp;lt;SPEECH&amp;gt;
  &amp;lt;SPEAKER&amp;gt;Second Witch&amp;lt;/SPEAKER&amp;gt;
  &amp;lt;LINE&amp;gt;When the hurlyburly&#39;s done,&amp;lt;/LINE&amp;gt;
  &amp;lt;LINE&amp;gt;When the battle&#39;s lost and won.&amp;lt;/LINE&amp;gt;
&amp;lt;/SPEECH&amp;gt;
&amp;lt;SPEECH&amp;gt;
  &amp;lt;SPEAKER&amp;gt;Third Witch&amp;lt;/SPEAKER&amp;gt;
  &amp;lt;LINE&amp;gt;That will be ere the set of sun.&amp;lt;/LINE&amp;gt;
&amp;lt;/SPEECH&amp;gt;
&amp;lt;SPEECH&amp;gt;
  &amp;lt;SPEAKER&amp;gt;First Witch&amp;lt;/SPEAKER&amp;gt;
  &amp;lt;LINE&amp;gt;Where the place?&amp;lt;/LINE&amp;gt;
&amp;lt;/SPEECH&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we get a unique list of all the speakers, because we will need it later to &lt;em&gt;aggregate&lt;/em&gt; the speaker lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;...
speeches = doc.search(&#39;SPEECH&#39;)
speakers = doc.search(&#39;SPEAKER&#39;).map(&amp;amp;:text).uniq
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-rubys-map-function:3c371311742d4197b845c3473589c736&#34;&gt;Using Rubys #map function&lt;/h2&gt;

&lt;p&gt;I love &lt;code&gt;#map&lt;/code&gt; and it&amp;rsquo;s whole family of &lt;em&gt;higher order functions&lt;/em&gt; like &lt;code&gt;reduce&lt;/code&gt;, and &lt;code&gt;select&lt;/code&gt; and every Highschooler&amp;rsquo;s favorite, &lt;code&gt;reject&lt;/code&gt;. This represent the best part of Ruby in my opinion.&lt;/p&gt;

&lt;p&gt;We need to &lt;em&gt;transform&lt;/em&gt; that &lt;code&gt;Array&lt;/code&gt; of nokogiri xml to be in a format for friendly for our purposes, and I have decided that the &lt;code&gt;Hash&lt;/code&gt; is the perfect data structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;{ name: &amp;quot;Bruce Lee&amp;quot;, lines: [
  &amp;quot;Hey Chuck....&amp;quot;,
  &amp;quot;Who&#39;s yo daddy?&amp;quot;,
  &amp;quot;Come on Chucky... Say it&amp;quot;
] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To do the transform we will use &lt;code&gt;map&lt;/code&gt;, which starts with an enumerable collection, an &lt;code&gt;Array&lt;/code&gt; here, and for every item in the source &lt;code&gt;Array&lt;/code&gt;, a new item will be inserted into a &lt;em&gt;new&lt;/em&gt; &lt;code&gt;Array&lt;/code&gt;, and that new &lt;code&gt;Array&lt;/code&gt; will be returned.&lt;/p&gt;

&lt;p&gt;That is what a &lt;code&gt;map&lt;/code&gt; means in programming. Here is the code that will map that ugly xml to something more friendly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;spoken_lines = speeches.map {|s| { name:  s.at(&#39;SPEAKER&#39;).text, 
                                   lines: s.search(&#39;LINE&#39;).map(&amp;amp;:text) } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how we build the &lt;code&gt;Array&lt;/code&gt; of &lt;code&gt;Hash&lt;/code&gt;s, one has per &lt;em&gt;row&lt;/em&gt; essentially, and the hash defines the &lt;em&gt;columns&lt;/em&gt;, much like a database in memory.&lt;/p&gt;

&lt;p&gt;Now instead of a lot of data we don&amp;rsquo;t want, in a format we don&amp;rsquo;t like, we have a nice, homogonized block of data to play with.&lt;/p&gt;

&lt;h2 id=&#34;i-m-getting-aggregated-here:3c371311742d4197b845c3473589c736&#34;&gt;I&amp;rsquo;m getting Aggregated here!&lt;/h2&gt;

&lt;p&gt;What the hell is an &amp;ldquo;aggregation&amp;rdquo;? Well I learned the term doing SQL queries, which, by the way is a great, declarative, almost functional language. It might be easier to &lt;em&gt;show it&lt;/em&gt;, than to &lt;em&gt;describe it&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;[
  { name: &amp;quot;Bruce Lee&amp;quot;, lines: [&amp;quot;Knock knock&amp;quot;] },
  { name: &amp;quot;Chuck Norris&amp;quot;, lines: [&amp;quot;Who&#39;s there?&amp;quot;] },
  { name: &amp;quot;Bruce Lee&amp;quot;, lines: [&amp;quot;Yo daaaadddddyyyyyy!&amp;quot;] }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This data can be aggregated to remove the &lt;em&gt;duplicate&lt;/em&gt; information, which will make it a hell of a lot easier to get the count of any one speakers lines. But to do so we need to actually make a couple swipes at the problem to take it down.&lt;/p&gt;

&lt;p&gt;We will be &lt;em&gt;iterating&lt;/em&gt; over that list of speakers we got from &lt;em&gt;line 8&lt;/em&gt;, and &lt;code&gt;select&lt;/code&gt; the lines that belong to each speaker.&lt;/p&gt;

&lt;p&gt;Imagine we are on the first &lt;em&gt;iteration&lt;/em&gt;, the &lt;code&gt;name&lt;/code&gt; variable would be &amp;ldquo;Bruce Lee&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;aggregated = speakers.map do |name|
  {
    name: name,
    line_count: spoken_lines.select {|l| l[:name] == name }.
                            reduce([]) {|acc, l| acc &amp;lt;&amp;lt; l[:lines] }.
                            flatten.count
  }
end
=&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hello-reduce-hope-you-guessed-my-name:3c371311742d4197b845c3473589c736&#34;&gt;Hello Reduce, hope you guessed my name&lt;/h2&gt;

&lt;p&gt;This will require a bit-o-splain&amp;rsquo;. The &lt;code&gt;map&lt;/code&gt; is just a map, and on each iteration we will be returning a single &lt;code&gt;hash&lt;/code&gt; with the stuff inside we be a wantin, namely the name, and a line count.&lt;/p&gt;

&lt;p&gt;The line count part gets a bit trickeh. Reduce is like a map, except that instead of building up a collection, it &lt;em&gt;reduces&lt;/em&gt; down to a single value, even if that single value is an Array of things :)&lt;/p&gt;

&lt;p&gt;We will be reducing the lines that are spead around in multiple key values, into a single key-value. Ie, line_count: 42. &lt;code&gt;reduce&lt;/code&gt; takes a block and it has 2 &lt;em&gt;block variables&lt;/em&gt;, the &lt;em&gt;accumulator&lt;/em&gt; and the &lt;em&gt;iterator&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;accumulator&lt;/em&gt; is the value that&amp;hellip; yep, accumulates over the iterations. Think of it as a variable whos scope extends the lifetime of the whole iteration. Every time the iteration returns a value, that value can be &amp;lsquo;mathed&amp;rsquo; against the accumulator and that result will continue to the next iteration as the accumulator. Easy, right?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%i[bob sue jim harry].reduce(&amp;quot;&amp;quot;) {|acc, name| acc = name }
=&amp;gt; :harry

%i[bob sue jim harry].reduce(&amp;quot;&amp;quot;) {|acc, name| name }
=&amp;gt; &amp;quot;&amp;quot;

%w[bob sue jim harry].reduce(0) {|acc, name| acc + name.chars.count }
=&amp;gt; 14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The easiest way to splain this shit is to just walk through it. So here we go:&lt;/p&gt;

&lt;p&gt;(iteration 1)
acc is 0, name is bob = 0 + bob.chars.count (3) = 3&lt;/p&gt;

&lt;p&gt;(iteration 2)
acc is 3, name is sue = 3 + sue.chars.count (3) = 6&lt;/p&gt;

&lt;p&gt;(iteration 3)
acc is 6, name is jim = 6 + jim.chars.count (3) = 9&lt;/p&gt;

&lt;p&gt;(iteration 4)
acc is 9, name is harry = 9 + harry.chars.count (5) = 14&lt;/p&gt;

&lt;h2 id=&#34;formatting-and-printing:3c371311742d4197b845c3473589c736&#34;&gt;Formatting and printing&lt;/h2&gt;

&lt;p&gt;Now that we have our values let&amp;rsquo;s sort, format and print. We start with the sorting, which goes a little something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;sorted = aggregated.sort {|a,b| b[:count] &amp;lt;=&amp;gt; a[:count] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we format it for printing by returning the line count, followed by a tab character, followed by their name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;formatted = sorted.map{|s| [s[:count], &amp;quot;\t&amp;quot;, s[:name]].join }.
                   join(&amp;quot;\n&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Printing is stupid simple at this point, and since we have run long I will just spit it out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;puts formatted
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;back-to-the-pipeline:3c371311742d4197b845c3473589c736&#34;&gt;Back to the pipeline&lt;/h2&gt;

&lt;p&gt;Now, when we run our unix command pipeline:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl http://www.ibiblio.org/xml/examples/shakespeare/macbeth.xml | xargs -c ./lc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we get the list of names and line counts. Isn&amp;rsquo;t functional programming in Ruby awesome?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Arrays, Multiple Assiment, and Splatting</title>
      <link>/idiomatic-ruby-2/</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/idiomatic-ruby-2/</guid>
      <description>

&lt;h2 id=&#34;in-ruby-the-array-is-king-thanks-matz:0e5e919d9272cede67549c6788ab2218&#34;&gt;In Ruby, the Array is King - Thanks Matz!&lt;/h2&gt;

&lt;p&gt;I have dug into the C source code to look at how Array was implemented since
early on I could tell that Ruby didn&amp;rsquo;t really allocate Arrays in the normal way,
ie.. start with what you have, data size-wise, and then &lt;em&gt;grow&lt;/em&gt; the Array from
there.&lt;/p&gt;

&lt;p&gt;If it worked in the simplistic form I thought about back in 2009, it would be
very, very inefficient, so I went digging. Here is what I found&amp;hellip; I give you
the TLDR version of the internals of Array memory management in Ruby&amp;hellip;..&lt;/p&gt;

&lt;p&gt;Matz and co have &lt;em&gt;highly optimized&lt;/em&gt; Arrays in Ruby so there is actually a lot
of linked lists and pointer math going on under the hood so you do can work
with Arrays at such a high level, with little care to how you do it. (for the
most part)&lt;/p&gt;

&lt;h2 id=&#34;use-the-array-luke-jedi-ruby-array-tricks:0e5e919d9272cede67549c6788ab2218&#34;&gt;Use the Array, Luke.. Jedi Ruby Array Tricks&lt;/h2&gt;

&lt;p&gt;Since Matz and co have gone through such lengths to make Arrays optimal and as
fast as something is going to be on a VM like MRI, I make liberal use of them
in my programs. Due to this need, Ruby has a bunch of &amp;lsquo;shortcuts&amp;rsquo; to help us
create and use Arrays.&lt;/p&gt;

&lt;p&gt;Want to create an Array of Strings? Coooooooo man, we got that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%w[John Susan Mary Black Red Heart Spade]
=&amp;gt; [&amp;quot;John&amp;quot;, &amp;quot;Susan&amp;quot;, &amp;quot;Mary&amp;quot;, &amp;quot;Black&amp;quot;, &amp;quot;Red&amp;quot;, &amp;quot;Heart&amp;quot;, &amp;quot;Spade&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What if you need spaces in those strings? Well, then you could do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%w[John Susan Mary Black Red Heart Spade 8\ of\ spades]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works because &lt;code&gt;\&lt;/code&gt; is an &lt;em&gt;escape&lt;/em&gt; character. In this case it &lt;em&gt;escapes&lt;/em&gt;
the &amp;lsquo;specialness&amp;rsquo; of the space character in the context of &lt;code&gt;%w&lt;/code&gt; which, if
you remember, uses spaces as an Array delimeter, saving us the &amp;lsquo;effort&amp;rsquo; of
using commas and quotes.&lt;/p&gt;

&lt;p&gt;Another common need in Ruby is to create an Array of &lt;code&gt;Symbols&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%i[hearts spades diamonds clubs]
=&amp;gt; [:hearts, :spades, :diamonds, :clubs]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, that works just like &lt;code&gt;%w&lt;/code&gt; except we get a &lt;code&gt;Symbol&lt;/code&gt; instead
of a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are a couple more:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;%r{ ^http://regex\. }
%{ String can have &#39;single&#39; or &amp;quot;double&amp;quot; quotes }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;array-maths-if-you-have-3-oranges-and-i-give-you-1-of-mine:0e5e919d9272cede67549c6788ab2218&#34;&gt;Array Maths - If you have 3 oranges and I give you 1 of mine&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s tell this story using code since this &lt;em&gt;is&lt;/em&gt; Ruby:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mine  = 5.times.map { :orange }
=&amp;gt; [:orange, :orange, :orange, :orange, :orange]

yours = 3.times.map { :orange }
=&amp;gt; [:orange, :orange, :orange]

given = [:orange]
=&amp;gt; [:orange]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s dangerous to go alone! Take this 🍊&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;yours = yours + mine.pop # .pop, pops one off _mine_
=&amp;gt; [:orange, :orange, :orange, :orange]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still following? I just gave you an orange bro (or broette)! What about my oranges now?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mine
=&amp;gt; [:orange, :orange, :orange, :orange]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Normally I prefer to &lt;em&gt;not mutate&lt;/em&gt; stuff willie-nillie, but since these are 🍊 s and not
numbers like 1 2 3 4, we can&amp;rsquo;t just do &lt;code&gt;mine - [:orange]&lt;/code&gt; (you can try it) because it
will take ALL the 🍊 s out of my bag.&lt;/p&gt;

&lt;h2 id=&#34;multiple-assignment-and-splatting:0e5e919d9272cede67549c6788ab2218&#34;&gt;Multiple assignment and splatting&lt;/h2&gt;

&lt;p&gt;The last two Array tricks I will show you are multiple assignment and the splat, or
deconstructive operator.&lt;/p&gt;

&lt;p&gt;Multiple assignment is useful in a number of ways, and rather than give another long
winded expaination of it, let&amp;rsquo;s look at some code!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def initialize(val1, val2, val3)
  @val1, @val2, @val3 = val1, val2, val3
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have seen this in a lot of Ruby code and I will call it shit, at least in this form. As
soon as someone needs to add another value to change the order, things get ugly pretty
fast. Let&amp;rsquo;s change the arguments to x, y, and z:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def initialize(x, y, z)
  @x, @y, @z = x, y, z
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case it isn&amp;rsquo;t extremely terrible from where I sit. As these are now 3d coordinates
their order and grouping makes a lot more sense. So in short, use multiple assignment like
this when the variables are closely related, but a better idea would be to make an object
to &amp;lsquo;contain&amp;rsquo; them and just pass that into this method. Then we don&amp;rsquo;t have the issues of
three params being passed in or what order they need to be in.&lt;/p&gt;

&lt;p&gt;But there is another form of multiple assignment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# swap around values
x, y = y, x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I like this swapping idiom very much when it is useful to the problem I am solving. Another
one would be decontructing multiple return values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def some_method
  [x, y, z]
end

x, y, z = some_method
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this method returns an Array, we can &amp;lsquo;deconstruct&amp;rsquo; that array into the three values
Here is another example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;head, *tail = %w[fred susan bobby]
head
=&amp;gt; &amp;quot;fred&amp;quot;

tail
=&amp;gt; [&amp;quot;susan&amp;quot;, &amp;quot;bobbby&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whoa!!! Pointer magic in Ruby?&lt;/p&gt;

&lt;p&gt;Well, no. That is the Splat, or deconstructor operator I elluded to before. Do you see how it
works? &lt;code&gt;head&lt;/code&gt; gets the first value of the Array, while &lt;code&gt;tail&lt;/code&gt; gets the rest of the elements,
so we end up with a head with 1 element, and a tail with the rest.&lt;/p&gt;

&lt;p&gt;That is all I have for you today. Soon I will start showing off some functional principles
that will make use of what you learned in the first 2 of this series, &amp;ldquo;Idiomatic Ruby&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;See you soon!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Idiomatic Ruby</title>
      <link>/idiomatic-ruby-1/</link>
      <pubDate>Mon, 20 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>/idiomatic-ruby-1/</guid>
      <description>

&lt;h2 id=&#34;just-because-it-runs-as-ruby-doesn-t-mean-it-is-ruby:bdec7a466a0d14d4fc6efa2a9be8b5a4&#34;&gt;Just because it runs AS Ruby doesn&amp;rsquo;t mean it IS Ruby!&lt;/h2&gt;

&lt;p&gt;OK, so you are writing IN Ruby, but you probably aren’t writing Ruby. You are writing c/basic in Rubyish syntax. This is bad. Slap your hand bad. Makes Matz cry bad. You should be writing in &lt;em&gt;idiomatic Ruby&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So what does this &lt;em&gt;idiomatic Ruby&lt;/em&gt; I speak of look like?&lt;/p&gt;

&lt;p&gt;What better way to present my case then by starting with some &lt;em&gt;unidiomatic Ruby&lt;/em&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def some_long_method_with_many_problems(user, ids)
  vals = []
  ids.each do |id|
    vals &amp;lt;&amp;lt; user.returns_a_hash(id)
  end

  if vals.any?
    retval = do_something_with_hashes(vals)
  else
    retval = do_something_without
  end
  retval
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then refactor it into this &lt;em&gt;idiomatic Ruby&lt;/em&gt; we get much different looking code. Code that is clean and neat and terse. &lt;em&gt;Ruby code&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Let’s start with what I would consider the &lt;em&gt;first&lt;/em&gt; violation of &lt;em&gt;idiomatic&lt;/em&gt; Ruby, the use of a local variable to be looped over and appended to or replaced based on the outcome of the loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;vals = []
ids.each do |id|
  vals &amp;lt;&amp;lt; user.returns_a_hash(id)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we really have here is a &lt;em&gt;enumeration&lt;/em&gt;. We are going to iterate over several objects and place the return of that object method call into an array.&lt;/p&gt;

&lt;p&gt;So instead of looping, lets make it &lt;em&gt;idiomatic&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;vals = ids.map {|id| user.returns_a_hash(id) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second violation to &lt;em&gt;idiomatic&lt;/em&gt; Ruby is the ‘inner’ assignment inside the conditional:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if vals.any?
  retval = do_something_with_hashes(vals)
else
  retval = do_something_without
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The fix is simple, remove the duplication of the retval assignment by moving the assignup up ahead of the if:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;retval = if vals.any?
  do_something_with_hashes(vals)
else
  do_something_without
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But then we need to think about what we want this method to &lt;em&gt;return&lt;/em&gt;. In this case it will be the return of one of the two methods in the conditional. Since this is &lt;em&gt;Ruby&lt;/em&gt;, every method returns the last evaluation naturally, which is why a return statement at the end of a method in Ruby makes little sense.&lt;/p&gt;

&lt;p&gt;Well, if the last evaluation is returned and the last evaluation is the return of one of the two methods, we don&amp;rsquo;t need to store a retval variable at all!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if vals.any?
  do_something_with_hashes(vals)
else
  do_something_without
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All together now!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def a_better_method(user, ids)
  vals = ids.map {|id| user.returns_a_hash(id) }
  if vals.any?
    do_something_with_hashes(vals)
  else
    do_something_without
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please challenge every line of code you have to be &lt;em&gt;idiomatic&lt;/em&gt;, &lt;em&gt;beautiful&lt;/em&gt; Ruby code.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>