<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Funcitonal, Idiomatic Ruby Musings - Jim OKelly - RubyMentor</title>
    <link>http://blog.rubymentor.io/article/</link>
    <description>Recent content in Articles on Funcitonal, Idiomatic Ruby Musings - Jim OKelly - RubyMentor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sat, 23 Nov 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.rubymentor.io/article/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introduction to Idiomatic Ruby</title>
      <link>http://blog.rubymentor.io/idiomatic-ruby-1/</link>
      <pubDate>Sat, 23 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.rubymentor.io/idiomatic-ruby-1/</guid>
      <description>

&lt;h2 id=&#34;just-because-it-runs-as-ruby-doesn-t-mean-it-is-ruby:bdec7a466a0d14d4fc6efa2a9be8b5a4&#34;&gt;Just because it runs AS Ruby doesn&amp;rsquo;t mean it IS Ruby!&lt;/h2&gt;

&lt;p&gt;OK, so you are writing IN Ruby, but you probably aren’t writing Ruby. You are writing c/basic in Rubyish syntax. This is bad. Slap your hand bad. Makes Matz cry bad. You should be writing in &lt;em&gt;idiomatic Ruby&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So what does this &lt;em&gt;idiomatic Ruby&lt;/em&gt; I speak of look like?&lt;/p&gt;

&lt;p&gt;What better way to present my case then by starting with some &lt;em&gt;unidiomatic Ruby&lt;/em&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def some_long_method_with_many_problems(user, ids)
  vals = []
  ids.each do |id|
    vals &amp;lt;&amp;lt; user.returns_a_hash(id)
  end

  if vals.any?
    retval = do_something_with_hashes(vals)
  else
    retval = do_something_without
  end
  retval
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then refactor it into this &lt;em&gt;idiomatic Ruby&lt;/em&gt; we get much different looking code. Code that is clean and neat and terse. &lt;em&gt;Ruby code&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Let’s start with what I would consider the &lt;em&gt;first&lt;/em&gt; violation of &lt;em&gt;idiomatic&lt;/em&gt; Ruby, the use of a local variable to be looped over and appended to or replaced based on the outcome of the loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;vals = []
ids.each do |id|
  vals &amp;lt;&amp;lt; user.returns_a_hash(id)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we really have here is a &lt;em&gt;enumeration&lt;/em&gt;. We are going to iterate over several objects and place the return of that object method call into an array.&lt;/p&gt;

&lt;p&gt;So instead of looping, lets make it &lt;em&gt;idiomatic&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;vals = ids.map {|id| user.returns_a_hash(id) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second violation to &lt;em&gt;idiomatic&lt;/em&gt; Ruby is the ‘inner’ assignment inside the conditional:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if vals.any?
  retval = do_something_with_hashes(vals)
else
  retval = do_something_without
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The fix is simple, remove the duplication of the retval assignment by moving the assignup up ahead of the if:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;retval = if vals.any?
  do_something_with_hashes(vals)
else
  do_something_without
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But then we need to think about what we want this method to &lt;em&gt;return&lt;/em&gt;. In this case it will be the return of one of the two methods in the conditional. Since this is &lt;em&gt;Ruby&lt;/em&gt;, every method returns the last evaluation naturally, which is why a return statement at the end of a method in Ruby makes little sense.&lt;/p&gt;

&lt;p&gt;Well, if the last evaluation is returned and the last evaluation is the return of one of the two methods, we don&amp;rsquo;t need to store a retval variable at all!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if vals.any?
  do_something_with_hashes(vals)
else
  do_something_without
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All together now!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def a_better_method(user, ids)
  vals = ids.map {|id| user.returns_a_hash(id) }
  if vals.any?
    do_something_with_hashes(vals)
  else
    do_something_without
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please challenge every line of code you have to be &lt;em&gt;idiomatic&lt;/em&gt;, &lt;em&gt;beautiful&lt;/em&gt; Ruby code.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>